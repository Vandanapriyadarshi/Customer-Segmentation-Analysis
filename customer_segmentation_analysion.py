# -*- coding: utf-8 -*-
"""Customer_Segmentation_Analysion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jTeO_-LDy6VOy-KUiZCVVakjRREms0iX

**CUSTOMER SEGMENTATION ANALYSIS AND PREDICTING CONSUMER BEHAVIOUR**
"""

import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import numpy as np

uploaded = files.upload()

data = pd.read_csv("customer_data.csv")

data.head()

data.tail()

data.info()

data.shape

data.describe()

data.columns

data.dtypes

missing_values = data.isnull().any(axis=1)
print("Rows with missing values : ")
print(data[missing_values == True])

duplicate_rows = data[data.duplicated()]
print("Duplicated Rows: ")
print(duplicate_rows)

data.dropna(axis=0, inplace=True)

data.drop_duplicates(inplace=True)

"""**SEGMENTS THE CUSTOMER ON THE BASIS OF AGE AND GENDER**"""

age_bins = [18, 36, 51, 66, 100]
age_labels = ['18-35', '36-50', '51-65', '65+']
data["Age Group"] = pd.cut(data["age"], bins=age_bins, labels=age_labels, right=False)
age_grp_counts = data["Age Group"].value_counts()
gender_counts = data["gender"].value_counts()
print("Age Group Distribution: ")
print(age_grp_counts)
print("Gender Distribution : ")
print(gender_counts)
plt.figure(figsize=(8,8))
plt.pie(age_grp_counts, labels=age_grp_counts.index, autopct='%1.1f%%', startangle=90)
plt.title("Customer Distribution by Age Group")
plt.subplots_adjust(top=0.80)
plt.axis('equal')
plt.show()
plt.figure(figsize=(8,8))
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=90)
plt.title("Customer Distribution by Gender")
plt.subplots_adjust(top=0.80)
plt.axis('equal')
plt.show()

"""**SEGMENTS THE CUSTOMER ON THE BASIS OF EDUCTIONS**"""

Education_spend = data.groupby('education')['spending'].sum().reset_index()
Total_Spend = Education_spend['spending'].sum()
Education_spend["percentage"] = Education_spend['spending']/Total_Spend * 100
Education_spend = Education_spend.sort_values(by='percentage', ascending=False)
print("Percentages Share of spending by education level: ")
print(Education_spend[['education','percentage']])
plt.figure(figsize=(8,8))
plt.pie(Education_spend['percentage'], labels=Education_spend['education'], autopct='%1.1f%%', startangle=90)
plt.title("Percentage Share of Spending by Education Level")
plt.axis('equal')
plt.show()

"""**Calculating Average Customer Spending by Country**"""

average_spend_by_country = data.groupby("country")["spending"].mean().reset_index()
top_5_countries = average_spend_by_country.sort_values(by='spending', ascending=False).head(5)

print("Top 5 countries by Average Customer Spending: ")
print(top_5_countries)

import matplotlib.pyplot as plt
plt.figure(figsize=(8,6))
plt.bar(top_5_countries['country'], top_5_countries['spending'], color='skyblue')
plt.title("Top 5 Countries by Average Customer Spending")
plt.xlabel("Country")
plt.ylabel("Average Spending")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""**Correlation Between Purchase Frequency & Customer Spending**"""

correlation_coefficient = data['purchase_frequency'].corr(data['spending'])
print(f"Correlation Coefficient Between Purchase Frequency and Spending: {correlation_coefficient}")
plt.figure(figsize=(8, 6))
plt.scatter(data['purchase_frequency'], data['spending'], alpha=0.5)
plt.title("Purchase Frequency Vs Customer Spending")
plt.xlabel('Purchase Frequency')
plt.ylabel('Customer Spending')
plt.grid(True)
plt.show()

"""**Correlation Between Customer Income & Customer Spending**"""

income_bins = [0, 30000, 60000, float('inf')]
income_labels = ['Low', 'Medium', 'High']
data['Income Category'] = pd.cut(data['income'], bins=income_bins, labels=income_labels, right=False)
Average_spend_by_income = data.groupby('Income Category')['spending'].mean().reset_index()
print("\nAverage Spending by Income Category:")
print(Average_spend_by_income)
correlation_coefficient = data['income'].corr(data['spending'])
print(f"\nCorrelation Coefficient Between Income and Spending: {correlation_coefficient:.4f}")
plt.figure(figsize=(8,6))
plt.scatter(data["income"], data["spending"], alpha=0.5)
plt.title("Customer Income vs Customer Spending")
plt.xlabel('Customer Income')
plt.ylabel('Customer Spending')
plt.grid(True)
plt.show()

"""**Feature** Importance Analysis with Random Forest"""

import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder

uploaded = files.upload()

data = pd.read_csv("customer_data.csv")

data.head()

data = data.drop(columns=["name"], errors="ignore")
label_encoder = LabelEncoder()
categorical_columns = ["gender", "education", "country"]
for column in categorical_columns:
    data[column] = label_encoder.fit_transform(data[column])
X = data.drop("spending", axis=1)
y = data["spending"]
rf_regressor = RandomForestRegressor(random_state=42)
rf_regressor.fit(X,y)
feature_importances = rf_regressor.feature_importances_
feature_importances_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})
feature_importances_df = feature_importances_df.sort_values(by="Importance", ascending=False)
print("Ranked list of features by importances:")
print(feature_importances_df)
corr_matrix = X.corr()
importances_matrix = corr_matrix.copy()
importances_matrix['Importance'] = pd.Series(feature_importances, index=X.columns)
plt.figure(figsize=(12,8))
sns.heatmap(importances_matrix, annot=True, cmap="coolwarm", vmin=-1, vmax=1, center=0, linewidths=0.5, linecolor='black')
plt.title("Feature Importance Analysis")
plt.show()

""" **Customer Segmentation Analysis with K Means Clustering**"""

import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt
import numpy as py
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler, LabelEncoder

uploaded = files.upload()

data = pd.read_csv("customer_data.csv")

data.head()

data = data.drop(columns=["name"], errors="ignore")
label_encoder = LabelEncoder()
categorical_columns = ["gender", "education", "country"]
for column in categorical_columns:
    data[column] = label_encoder.fit_transform(data[column])
scaler = StandardScaler()
scaled_features = scaler.fit_transform(data)
inertia = []
k_values = range(1,11)
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)
plt.figure(figsize=(8,6))
plt.plot(k_values, inertia, marker='o', linestyle='-')
plt.title("Elbow Method for Optimal Clusters")
plt.xlabel("Number of Clusters (k)")
plt.ylabel("Inertia")
plt.grid(True)
plt.show()
optimal_clusters = 4
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
data['Cluster'] = kmeans.fit_predict(scaled_features)
plt.figure(figsize=(8,6))
sns.scatterplot(data=data, x='income', y='spending', hue='Cluster', palette='viridis', s=100)
plt.title("Customer Segmentation Clusters")
plt.xlabel("Income")
plt.ylabel("Spending")
plt.legend(title="Cluster")
plt.grid(True)
plt.show()
feature_columns = [col for col in data.columns if col != 'Cluster']
cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
print("Cluster Centers (Scaled Back):")
print(pd.DataFrame(cluster_centers, columns = feature_columns))

"""Building Customer Spending Prediction Model with Decision Tree **Regressor**"""

import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.preprocessing import LabelEncoder

uploaded = files.upload()

data = pd.read_csv("customer_data.csv")

data.head()

label_encoder_gender = LabelEncoder()
label_encoder_country = LabelEncoder()
label_encoder_education = LabelEncoder()
data['gender'] = label_encoder_gender.fit_transform(data['gender'])
data['country'] = label_encoder_country.fit_transform(data['country'])
data['education'] = label_encoder_education.fit_transform(data['education'])
features = ["age","gender","education","income","country", "purchase_frequency"]
target = "spending"
X = data[features]
y = data[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = DecisionTreeRegressor(random_state=42)
model.fit(X_train, y_train)
print("Enter customer details for spending prediction:")
age = float(input("Age: "))
gender = input("Gender (Male/Female): ")
education = input("Education Level (High School, Bachelor, Master, PhD): ")
income = float(input("Income: "))
country = input("Country: ")
purchase_frequency = float(input("Purchase Frequency: "))
gender_encoded = label_encoder_gender.transform([gender])[0]
country_encoded = label_encoder_country.transform([country])[0]
education_encoded = label_encoder_education.transform([education])[0]
input_data = np.array([[age, gender_encoded, education_encoded, income, country_encoded, purchase_frequency]])
predicted_spending = model.predict(input_data)
print(f"Predicted Customer Spending: $ {predicted_spending[0]:.2f}")